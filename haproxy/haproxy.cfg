global
    log stdout format raw local0
    maxconn 4000

defaults
    mode http
    option httplog
    option dontlognull
    timeout connect 5s
    timeout client  120s
    timeout server  120s
    retries 2
    option redispatch   # if a chosen server fails, retry another (breaks stickiness only on failures)

resolvers docker
    parse-resolv-conf
    resolve_retries 30
    timeout retry 1s
    hold valid 10s
    accepted_payload_size 8192

frontend fe_workers
    bind :5000
    # (optional) remove monitor-uri if you donâ€™t need an LB health endpoint
    # monitor-uri /health
    default_backend be_workers



backend be_workers
	# Optional: add which worker handled the request
	# http-response add-header X-Backend %[srv_name]

	balance hdr(X-Session-Affinity)   # keep your session affinity
	acl no_aff hdr_cnt(X-Session-Affinity) eq 0
		http-response set-header X-Session-Affinity %[src] if no_aff
		balance roundrobin

	http-response add-header X-Backend-IP %[dst]
	server-template wrk 32 worker:5000 resolvers docker init-addr last,libc,none resolve-opts allow-dup-ip resolve-prefer ipv4

#	backend be_workers
    #	# no httpchk, no health probes
    #	hash-type consistent
    #	balance hdr(X-Session-Affinity)   # keep your session affinity

    #	# dynamic discovery, but **no** 'check' parameter
    #	server-template wrk 32 worker:5000 resolvers docker init-addr last,libc,none resolve-opts allow-dup-ip resolve-prefer ipv4

#	backend be_workers
    #	balance hdr(X-Session-Affinity)
    #	hash-type consistent

    #	# If no header present, assign round robin and inject header for future calls
    #	acl no_aff hdr_cnt(X-Session-Affinity) eq 0
    #	http-request set-header X-Session-Affinity %[src] if no_aff

    #	http-response add-header X-Backend %[srv_name]
    #	http-response add-header X-Session-Affinity %[req.hdr(X-Session-Affinity)]

    #	server-template wrk 32 worker:5000 resolvers docker init-addr last,libc,none resolve-opts allow-dup-ip resolve-prefer ipv4
